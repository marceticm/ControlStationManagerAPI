// <auto-generated />
using System;
using ControlStationManager.DAL.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ControlStationManager.DAL.Migrations
{
    [DbContext(typeof(ControlStationContext))]
    [Migration("20200901083313_ExtendedControlStations")]
    partial class ExtendedControlStations
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ControlStationManager.DAL.Entities.ControlStation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ControlStations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Bulevar Patrijarha Pavla 9",
                            Name = "Aleksinac 1",
                            Type = "GMRS",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Address = "Bulevar Oslobodjenja 156",
                            Name = "Beograd",
                            Type = "GMRS",
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            Address = "Gandijeva 90",
                            Name = "Kragujevac 2",
                            Type = "MRS",
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            Address = "Bulevar Nikole Tesle BB",
                            Name = "Nis 1",
                            Type = "GMRS",
                            UserId = 1
                        },
                        new
                        {
                            Id = 5,
                            Address = "Kisacka 66",
                            Name = "Novi Sad 1",
                            Type = "GMRS",
                            UserId = 1
                        },
                        new
                        {
                            Id = 6,
                            Address = "Paunova 19",
                            Name = "Beograd 2",
                            Type = "GMRS",
                            UserId = 1
                        },
                        new
                        {
                            Id = 7,
                            Address = "Bulevar Zorana Djindjica 10",
                            Name = "Beograd 3",
                            Type = "MRS",
                            UserId = 1
                        },
                        new
                        {
                            Id = 8,
                            Address = "Vrsacka 98",
                            Name = "Novi Sad 2",
                            Type = "GMRS",
                            UserId = 1
                        },
                        new
                        {
                            Id = 9,
                            Address = "Despota Stefana BB",
                            Name = "Sabac 1",
                            Type = "GMRS",
                            UserId = 1
                        },
                        new
                        {
                            Id = 10,
                            Address = "27. marta 45",
                            Name = "Kragujevac 1",
                            Type = "GMRS",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("ControlStationManager.DAL.Entities.StationItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ControlStationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastCheckDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("NextCheckDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ControlStationId");

                    b.ToTable("StationItems");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            ControlStationId = 1,
                            LastCheckDate = new DateTime(2020, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NextCheckDate = new DateTime(2020, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        },
                        new
                        {
                            Id = -2,
                            ControlStationId = 1,
                            LastCheckDate = new DateTime(2020, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NextCheckDate = new DateTime(2020, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        });
                });

            modelBuilder.Entity("ControlStationManager.DAL.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateOfBirth = new DateTime(1992, 9, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailAddress = "marcetic18@hotmail.com",
                            FirstName = "Dusan",
                            JobTitle = "engineer",
                            LastName = "Glisic",
                            PasswordHash = new byte[] { 136, 169, 183, 174, 85, 182, 121, 170, 45, 139, 3, 168, 181, 195, 26, 219, 10, 143, 67, 148, 126, 116, 142, 214, 171, 188, 87, 198, 174, 214, 44, 49, 150, 181, 0, 133, 177, 122, 143, 204, 247, 44, 95, 122, 185, 229, 245, 39, 143, 198, 110, 189, 139, 113, 162, 2, 92, 112, 156, 23, 213, 174, 58, 233 },
                            PasswordSalt = new byte[] { 93, 76, 249, 62, 243, 227, 134, 154, 227, 119, 146, 70, 104, 109, 255, 136, 237, 201, 66, 1, 45, 91, 142, 203, 58, 108, 94, 14, 126, 183, 149, 203, 234, 116, 81, 47, 100, 143, 250, 57, 230, 195, 138, 144, 127, 169, 189, 172, 240, 61, 25, 32, 214, 24, 161, 137, 201, 110, 246, 44, 116, 227, 115, 201, 62, 76, 134, 162, 184, 35, 73, 76, 249, 26, 243, 251, 120, 119, 33, 122, 240, 241, 132, 3, 21, 72, 57, 240, 69, 109, 199, 189, 142, 113, 36, 37, 76, 253, 145, 37, 125, 124, 179, 84, 94, 187, 124, 198, 250, 57, 37, 126, 140, 49, 112, 182, 242, 39, 208, 25, 231, 35, 139, 93, 177, 223, 191, 235 },
                            PhotoUrl = "https://randomuser.me/api/portraits/men/72.jpg",
                            Username = "Dusan"
                        });
                });

            modelBuilder.Entity("ControlStationManager.DAL.Entities.StationItem", b =>
                {
                    b.HasOne("ControlStationManager.DAL.Entities.ControlStation", "ControlStation")
                        .WithMany("StationItems")
                        .HasForeignKey("ControlStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
